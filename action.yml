name: 'Android Kernel Build Action'
description: "A action to built android kernel."

branding:
  icon: 'activity'
  color: 'blue'

inputs:
  kernel-url:
    description: 'Kernel Source Url'
    required: true
  depth:
    required: false
    default: 1
  vendor:
    required: false
    default: false
  vendor-url:
    description: 'Kernel Vendor Source Url'
    required: false
  kernel-dir:
    required: false
    default: kernel
  vendor-dir:
    required: false
    default: vendor
  kernel-branch:
    description: 'Branch name'
    required: false
    default: main
  vendor-branch:
    required: false
    default: main
  config:
    description: 'configuration for building android kernel'
    required: true
    default: defconfig
  arch:
    required: true
    default: arm64
  android-version:
    description: 'Android version.'
    required: true
    default: 12
  path:
    description: 'Set environment PATH'
    required: true
    default: false
  make-options:
    description: 'Make Options'
    required: true
    default: false
  extra-version:
    description: 'Kernel Extra Version'
    required: false
    default:
  python:
    description: 'Set Python Version'
    required: true
    default: python3
  gcc64-url:
    description: 'GCC64 Repo'
    required: false
    default: 
  gcc64-tar:
    description: 'GCC64 tar URL'
    required: false
    default: 
  clang-url:
    description: 'Clang Repo'
    required: false
    default: 
  clang-tar:
    description: 'Clang tar URL'
    required: false
    default: 
  ksu:
    description: 'KernelSU function support'
    required: false
    default: false
  ksu-version:
    description: 'KernelSU default branch'
    required: false
    default: "main"
  ksu-other:
    required: false
    default: false
  ksu-url:
    description: "Use 3rd KernelSU"
    required: false
    default: ""
  ksu-lkm:
    description: "Build KernelSU as a loadable kernel module"
    required: false
    default: false
  disable-lto:
    description: 'Disable LTO configs for configs.'
    required: false
    default: false
  lxc:
    description: 'Enable lxc and docker configs for configs.'
    required: false
    default: false
  lxc-patch:
    description: 'Apply lxc patch aviod not booting'
    required: false
    default: false
  nethunter:
    description: 'Enable Kali nethunter'
    required: false
    default: false
  nethunter-patch:
    description: 'patch config'
    required: false
    default: false
  kvm:
    description: 'Enable KVM for configs.'
    required: false
    default: false
  ccache:
    description: 'Enable Ccache for compiling kernel'
    required: false
    default: false
  aosp-clang:
    description: 'Use clang from aosp project.'
    required: false
    default: false
  aosp-clang-version:
    required: false
    default: "r383902"
  other-clang-url:
    required: false
    default: ''
  other-clang-branch:
    required: false
    default: main
  android-ndk:
    description: 'Use Android NDK to build kernrl (Experimental features)'
    required: false
    default: false
  android-ndk-version:
    description: 'Please press nember instead of r(e.g. : 26).'
    required: false
    default: r21b
  anykernel3:
    description: 'Package kernel use anykernel3.'
    required: false
    default: false
  anykernel3-url:
    description: '3rdparty anykernrl3 url path'
    required: false
    default: ""
  bootimg-url:
    description: "boot.img path"
    required: false
    default: ""
  release:
    description: "After the kernel compilation is completed, it will be automatically published to the releases page"
    required: false
    default: false
  access-token:
    description: 'PAT with repository scope (https://github.com/settings/tokens)'
    required: false

runs:
  using: 'composite'
  steps:

    - name: Setup ccache
      if: inputs.ccache == 'true'
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ inputs.config }}-0cb68f9cbcbb3de9c966cf66ed51471fbe51419e
        max-size: 4G

    - name: Build Kernel
      shell: bash
      run: |
         ########
         if [[ ${GITHUB_ACTIONS} != "true" || ${OSTYPE} != "linux-gnu" || ! -f /bin/apt ]]; then
             printf "This Action Is Intended For Debian-based Runner.\n"
             exit 127
         fi

         if [ "$(id -u)" -eq 0 ]; then
             export SU=
         else
             export SU=sudo
         fi
         if [ -f /usr/bin/docker ]; then
             echo "::group:: Cleaning necessary disk space"
             "$SU" docker image prune --all --force
         fi
         echo "::endgroup::"

         echo "::group:: Installing Building Depend Packages"
         "$SU" apt-get update
         "$SU" apt-get install --no-install-recommends -y git-core gnupg flex bison build-essential zip curl zlib1g-dev libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig python2
         aria2c -q https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh && NONINTERACTIVE=1 bash ./uninstall.sh -f -q
         echo "::endgroup::"
         export SWAP_FILE=$(swapon --show=NAME | tail -n 1)
         if [ -f /bin/swapon ]; then
             echo "::group:: Setting Up Swap"
             "$SU" swapoff $SWAP_FILE
             "$SU" rm $SWAP_FILE
             "$SU" fallocate -l 16G $SWAP_FILE
             "$SU" chmod 600 $SWAP_FILE
             "$SU" mkswap $SWAP_FILE
             "$SU" swapon $SWAP_FILE
             echo "::endgroup::"
         fi

         echo "::endgroup::"
         
         echo "::group:: Pulling Kernel Source"
         git clone --recursive ${{ inputs.kernel-url }} -b "${{ inputs.kernel-branch }}" --depth=${{ inputs.depth }} kernel/${{ inputs.kernel-dir }}
         echo "::endgroup::"

         if [ "${{ inputs.vendor }}" = true ]; then
             echo "::group:: Pulling Kernel vendor source"
             git clone ${{ inputs.vendor-url }} --depth=${{ inputs.depth }} kernel/${{ inputs.vendor-dir }} -b ${{ inputs.vendor-branch }}
             test -d kernel/${{ inputs.vendor-dir }}/vendor && cp -rv kernel/${{ inputs.vendor-dir }}/vendor kernel
             test -d kernel/${{ inputs.vendor-dir }}/vendor && cp -rv kernel/${{ inputs.vendor-dir }}/vendor ./
             echo "::endgroup::"
         fi

         cd kernel/${{ inputs.kernel-dir }}
         function version_gt() { test "$(echo -e "$1\n$2" | sort -V | tail -n1)" == "$1"; }
         VERSION=$(grep -E '^VERSION = ' Makefile | awk '{print $3}')
         PATCHLEVEL=$(grep -E '^PATCHLEVEL = ' Makefile | awk '{print $3}')
         SUBLEVEL=$(grep -E '^SUBLEVEL = ' Makefile | awk '{print $3}')
         if [ "$VERSION" -lt 5 ]; then
             touch nongki.txt
         elif [ "PATCHLEVEL" -lt 10 ]; then
             touch nongki.txt
         fi

         
          if [ ${{ inputs.ksu }} = true ]; then
            echo "::group:: Initializing KernelSU"
            rm -rf KernelSU
                if [ ${{ inputs.ksu-other }} = true ]; then
                    curl -SsL "${{ inputs.ksu-url }}/raw/${{ inputs.ksu-version }}/kernel/setup.sh" | bash -s ${{ inputs.ksu-version }}
                else
                    echo "Kernel version: $VERSION.$PATCHLEVEL.$SUBLEVEL"
 
                    curl -LSs "https://raw.githubusercontent.com/Andrey0800770/KernelSU/main/kernel/setup.sh" | bash -s ${{ inputs.ksu-version }}
                fi
          fi
            
            echo "::endgroup::"
         

         if [ -f scripts/dtc/libfdt/mkdtboimg.py ]; then
            if grep python2 scripts/Makefile.lib >/dev/null; then
                echo "::group:: Uning mkdtboimg Python3 version instead of Python2 version"
                rm -rf -v scripts/dtc/libfdt/mkdtboimg.py && aria2c https://github.com/dabao1955/kernel_build_action/raw/main/mkdtboimg.py -o scripts/dtc/libfdt/mkdtboimg.py
            elif grep scripts/ufdt && test ! -d scripts/ufdt >/dev/null; then
                aria2c https://github.com/dabao1955/kernel_build_action/raw/main/mkdtboimg.py -o ufdt/libufdt/utils/src/mkdtboimg.py
            fi
            test -f /usr/bin/python2 || "$SU" ln -s -f -v /usr/bin/python3 /usr/bin/python2
         fi
         echo "::endgroup::"

         if [ ${{ inputs.nethunter }} = true ]; then
             echo "::group:: Initializing Kali nethunter"
             aria2c https://github.com/dabao1955/kernel_build_action/raw/main/nethunter/config.sh -o nconfig.sh &&  bash nconfig.sh arch/${{ inputs.arch }}/configs/${{ inputs.config }} -w
             if [ ${{ inputs.nethunter-patch }} = true ]; then
                 aria2c https://github.com/dabao1955/kernel_build_action/raw/main/nethunter/add-wifi-injection.patch && git apply add-wifi-injection.patch
                 aria2c apply https://github.com/dabao1955/kernel_build_action/raw/main/nethunter/fix-ath9k-naming-conflict.patch && git apply fix-ath9k-naming-confict.patch
                 if [ "$SUBLEVEL" -lt "19" ]; then
                     aria2c https://github.com/dabao1955/kernel_build_action/raw/main/nethunter/add-wifi-injection-4.14.patch && git apply add-wifi-injection-4.14.patch
                 fi
             else
                  echo "skip patch"
             fi
             echo "::endgroup::"
         fi

         if [ ${{ inputs.disable-lto }} = true ]; then
             if grep -q "LTO" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}"
             then
                  sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ inputs.arch }}/configs/${{ inputs.config }} 
                  sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ inputs.arch }}/configs/${{ inputs.config }} 
                  sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ inputs.arch }}/configs/${{ inputs.config }} 
                  echo "CONFIG_LTO_NONE=y" | tee -a arch/${{ inputs.arch }}/configs/${{ inputs.config }} >/dev/null
             fi
         fi

         if [ ${{ inputs.kvm }} = true ]; then
            echo "CONFIG_VIRTUALIZATION=y" | tee -a arch/${{ inputs.arch }}/configs/${{ inputs.config }} >/dev/null
            echo "CONFIG_KVM=y" | tee -a arch/${{ inputs.arch }}/configs/${{ inputs.config }} >/dev/null
            echo "CONFIG_KVM_MMIO=y" | tee -a arch/${{ inputs.arch }}/configs/${{ inputs.config }} >/dev/null
            echo "CONFIG_KVM_ARM_HOST=y" | tee -a arch/${{ inputs.arch }}/configs/${{ inputs.config }} >/dev/null
         fi

         if [ ${{ inputs.lxc }} = true ]; then
             echo "::group:: Enabling LXC"
             aria2c https://github.com/dabao1955/kernel_build_action/raw/main/lxc/config.sh && bash config.sh arch/${{ inputs.arch }}/configs/${{ inputs.config }} -w
             if [ ${{ inputs.lxc-patch }} = true ]; then
                 aria2c https://github.com/dabao1955/kernel_build_action/raw/main/lxc/xt_qtaguid.patch
                 aria2c https://github.com/dabao1955/kernel_build_action/raw/main/lxc/cgroup.patch
                 patch kernel/cgroup/cgroup.c < cgroup.patch
                 patch net/netfilter/xt_qtaguid.c < xt_qtaguid.patch
             else
                 echo skip lxc patching
             fi
             echo "::endgroup::"
         fi
         echo "::group:: Python VERSION"

         $SU update-alternatives --install /usr/bin/python python /usr/bin/${{ inputs.python }} 1
         python --version
         command -v python

         echo "::endgroup::"
         
         echo "::group:: Building Kernel with selected cross compiler"
         mkdir out -p -v
         
         if [ -n "${{ inputs.gcc64-url }}" ]; then
             mkdir -p -v "$HOME/gcc64"
             git clone ${{ inputs.gcc64-url }} $HOME/gcc64
             GCC64="$HOME/gcc64/bin"
             echo "$GCC64"
         fi

         if [ -n "${{ inputs.gcc64-tar }}" ]; then
             mkdir -p -v "$HOME/gcc64"
             wget -q -O gcc64.tar "${{ inputs.gcc64-tar }}"
             case "$(file -b --mime-type gcc64.tar)" in
                 application/x-gzip) tar -xzf gcc64.tar -C "$HOME/gcc64" ;;   # .tar.gz
                 application/x-xz)   tar -xJf gcc64.tar -C "$HOME/gcc64" ;;   # .tar.xz
                 application/zip)    unzip gcc64.tar -d "$HOME/gcc64" ;;       # .zip
                 application/x-tar)  tar -xf gcc64.tar -C "$HOME/gcc64" ;;     # .tar
                 *) echo "Tipo de arquivo não suportado: $(file -b --mime-type gcc64.tar)"; exit 1 ;;
             esac
             echo "$HOME/gcc64/bin"
         fi

         if [ -n "${{ inputs.clang-url }}" ]; then
             mkdir -p -v "$HOME/clang"
             git clone ${{ inputs.clang-url }} $HOME/clang
             CLANG="$HOME/clang/bin"
             echo "$CLANG"
         fi
         if [ -n "${{ inputs.clang-tar }}" ]; then
             mkdir -p -v "$HOME/clang"
             wget -q -O clang.tar ${{ inputs.clang-tar }}
             case "$(file -b --mime-type clang.tar)" in
                 application/x-gzip) tar -xzf clang.tar -C "$HOME/clang" ;;   # .tar.gz
                 application/x-xz)   tar -xJf clang.tar -C "$HOME/clang" ;;   # .tar.xz
                 application/zip)    unzip clang.tar -d "$HOME/clang" ;;       # .zip
                 application/x-tar)  tar -xf clang.tar -C "$HOME/clang" ;;     # .tar
                 *) echo "Tipo de arquivo não suportado: $(file -b --mime-type clang.tar)"; exit 1 ;;
             esac
             CLANG="$HOME/clang/bin"
             echo "$CLANG"
             ls "$HOME/clang"
         fi

         export PLATFORM_VERSION=10.0
         export EXTRAVERSION="${{ inputs.extra-version }}"
         
         make O=out ARCH=arm64 ${{ inputs.config }}
         echo "Starting compilaton"
         PATH="${{ inputs.path }}" ${{ inputs.make-options }}
         echo "::endgroup::"

         unset USE_CCACHE CLANG_TRIPLE CROSS_COMPILE_ARM32 CROSS_COMPILE CLANG_PATH HOMES SUBLEVEL KVER COMMAND SWAP_FILE SUBLEVEL PATCHLEVEL VERSION

         if [ ${{ inputs.anykernel3 }} = false ]; then
            echo "::group:: Preparing to Upload boot.img"
            mkdir split
            cd split
            export HOST_ARCH=$(dpkg --print-architecture)
            case ${HOST_ARCH} in
                armv7* | armv8l | arm64 | armhf | arm) aria2c https://github.com/Shubhamvis98/AIK/raw/4ac321dfd48e16344e6146c505708aa720ff0bb3/bin/magiskboot_arm -o magiskboot && chmod 755 magiskboot ;;
                i*86 | x86 | amd64 | x86_64) aria2c https://github.com/Shubhamvis98/AIK/raw/4ac321dfd48e16344e6146c505708aa720ff0bb3/bin/magiskboot_x86 -o magiskboot && chmod 755 magiskboot  ;;
                *) echo "Unknow cpu architecture for this device !" && exit 1 ;;
            esac
            aria2c ${{ inputs.bootimg-url }} -o boot.img
            nohup ./magiskboot unpack boot.img
            export FMT=$(cat nohup.out | grep "KERNEL_FMT" | awk '{gsub("\\[", "", $2); gsub("\\]", "", $2); print $2}')
            if [ "$FMT" = "raw" ] ; then
                cp -v ../out/arch/${{ inputs.arch }}/boot/Image kernel
            else
                if ls dtb >/dev/null ; then
                    cp -v ../out/arch/${{ inputs.arch }}/boot/Image.*-dtb kernel
                else
                    cp -v ../out/arch/${{ inputs.arch }}/boot/Image.* kernel
                fi
            fi
            ./magiskboot repack boot.img
            rm -rf boot.img
            mkdir -p -v ../../../build
            mv *.img ../../../build/boot.img -v
            cd ..
            echo "::endgroup::"
         else
            echo "::group:: Packaging Anykernel3 flasher"
            if [ ! -z ${{ inputs.anykernel3-url }} ]; then
                git clone ${{ inputs.anykernel3-url }} AnyKernel3
            else
                git clone https://github.com/osm0sis/AnyKernel3
                sed -i 's!BLOCK=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!BLOCK=auto;!g' AnyKernel3/anykernel.sh
                sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
                sed -i 's/is_slot_device=0;/IS_SLOT_DEVICE=auto;/g' AnyKernel3/anykernel.sh
            fi

            if [ -f out/arch/${{ inputs.arch }}/boot/Image.*-dtb ]; then
                cp out/arch/${{ inputs.arch }}/boot/Image.*-dtb AnyKernel3/ -rv
            elif [ -f out/arch/${{ inputs.arch }}/boot/Image.* ]; then
                cp out/arch/${{ inputs.arch }}/boot/Image.* AnyKernel3/ -rv
            else
                cp out/arch/${{ inputs.arch }}/boot/Image AnyKernel3/ -rv
            fi

            test -f out/arch/${{ inputs.arch }}/boot/dtbo.img && cp -v out/arch/${{ inputs.arch }}/boot/dtbo.img AnyKernel3/

            rm -rf -v AnyKernel3/.git* AnyKernel3/README.md
            if [ ${{ inputs.release }} = false ]; then
                cp AnyKernel3 ../../build -r -v
            else
                zip Anykernel3-flasher.zip AnyKernel3/*
                mv Anykernel3-flasher.zip ../../build -v
            fi
            echo "::endgroup::"
         fi

    - id: uploadi
      if: ${{ inputs.release == 'false' && inputs.anykernel3 == 'false' }}
      uses: actions/upload-artifact@v4
      with:
        name: kernel-built-bootimg
        path: build/*
        if-no-files-found: error
        overwrite: true

    - id: uploada
      if: ${{ inputs.release == 'false' && inputs.anykernel3 == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: Anykernel3-flasher
        path: build/*
        if-no-files-found: error
        overwrite: true

    - id: release
      if: inputs.release == 'true'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ inputs.access-token }}
      with:
        name: Last CI build kernel
        tag_name: last-ci
        files: build/*
        make_latest: true
        body: |
            config: ${{ inputs.config }}
            branch: ${{ inputs.kernel-branch }}
            source: ${{ inputs.kernel-url }}
 
